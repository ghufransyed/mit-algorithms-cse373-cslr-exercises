2-1
Insertion sort on small arrays in merge sort

Consider a modification to merge sort in which
n/k sublists of length k are sorted using insertion sort 
and then merged using the standard merging mechanism, 
where k is a value to be determined.

a) show that insertion sort can sort the n/k sublists, 
each of length k, in theta(nk) worst-case time

each sublist of length k is sorted in theta( k^2 )time
There are n/k of them, so the total time to sort
the sublists =theta( n/k * k^2 ) = theta (nk) worst
case time.

b)
Show how to merge the sublists in theta(n lg(n/k)) worst-case
time.
Assume that there are n/k sublists, already sorted and ready to merge
Further, assume that n/k = 2^p where p is a natural number

Calculating number of levels:
Then 2^something = number of levels
So, number of levels = log_2_something

in our case, number of levels = log_2_(number of sorted sublists)
= Theta(log_2(n/k))

Calculating time per level:
at each level, there are n/k sublists with k items each = n/k * k 
= n = Theta(n)

Therefore, the total time of merging the n/k sublists that were 
sorted using insertion sort is Theta(n * log_2(n/k))

c)
Given that the modified algorithm runs in theta(nk + n lg(n/k))
worst-case time, what is the largest value of k as a function of n
for which the modified algorithm has the same running time as
standard merge sort, in terms of Theta-notation?

Equate theta(n + lg (n/k)) = theta(n lg n)
then k = n - n lg n + lg n

d) 
In practice, you would determine this empirically. In other words,
you would test both algorithms on a particular machine and see
above what level of k the 'pure 'merge sort dominates the insertion sort
version of merge-sort. 

2.2 Correctness of bubblesort

BUBBLESORT(A)
for i = 1 to A.length - 1
    for j = A.length downto i + 1
        if A[j] < A[j-1]
            exchange A[j] with A[j-1]

a). In addition to correctness, we also need to show that it is 
correct for a reverse sorted sequence.

b)
for loop in lines 2-4:
Initialization: A[j-1] = A[n-1] for input of size n,
contains the smallest element in A[j-1..n]

Maintenance:
At the end of each loop, A[j-1] contains the smallest element in
the subarray A[j-1..n]

Termination
after termination, A[i+1-1] = A[i] contains the smallest element 
in the subarray A[i..n]

c)
Initial:
The array A'[1..i] = A'[1] contains the (trivially) sorted array
of length 1, and contains the i = 1 smallest elements of A

Maintenance:
The array A'[1..i-1] contains the sorted array of length i,
and contains the i smallest elements of A

Termination
The array A'[i..i] contains the sorted array of length i,
and contains the i smallest elements of A. Therefore, A[i + 1] = A[n]
which is the final element in the array, contains the largest element.
Therefore, the array A is sorted.

d) 
The worst case running time of bubble sort is for a reverse-sorted
array.
Each inner loop iteration is O(1)
Each outer loop iteration is O(n)
The number of outer loop iterations is n
Therefore, the worst-case running time of bubblesort is O(n^2)







